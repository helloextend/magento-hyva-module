<?php
/**
 * Hyva Extend Warranty - base warranty offers js-object
 *
 * @author      Extend Magento Team <magento@guidance.com>
 * @category    Extend
 * @package     Hyva_ExtendWarranty
 * @copyright   Copyright (c) 2022 Extend Inc. (https://www.extend.com/)
 */

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Hyva\GraphqlViewModel\ViewModel\GraphqlViewModel;
use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\Cart\GraphQlQueriesWithVariables as GraphQlQueries;
use Hyva\Theme\ViewModel\Store as StoreViewModel;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

/** @var GraphQlQueries $viewModelCart */
$viewModelCart = $viewModels->require(GraphQlQueries::class);
/** @var StoreViewModel $viewModelStore */
$viewModelStore = $viewModels->require(StoreViewModel::class);
/** @var GraphqlViewModel $viewModelGraphQl */
$viewModelGraphQl = $viewModels->require(GraphqlViewModel::class);
?>
<script>
    function initCartWarrantyDetails() {
        return {
            cart: {},
            cartItems: {},
            extendCartData: {},

            getExtendCartData(data) {
                if (data.cart) {
                    this.cart = data.cart
                    this.cartItems = this.cart && this.cart.items ?
                        this.cart.items.sort(function(a,b) { return a.item_id - b.item_id }) :
                        [];

                    // global variable with cart data
                    window.extendCartData = {
                        cartId: this.cart.cartId,
                        items: JSON.parse(JSON.stringify(this.cartItems))
                    };
                    window.dispatchEvent(new CustomEvent('warranty-data-loaded', { detail: window.extendCartData }));
                }
            }
        }
    }

    function initCartItemWarrantyOffers(element, config) {
        return {
            element: element,
            options: {
                isInCartPage: config.isInCartPage,
                buttonEnabled: config.buttonEnabled,
                addToCartEvent: null
            },
            itemElem: null,
            itemCartData: null,

            init() {
                this.itemElem = this.options.isInCartPage ?
                    this.element.closest('.table-row-item') :
                    this.element.closest('.items-start');

                if (!window.Extend) {
                    window.addEventListener('extend-sdk-ready', () => this.setItemCartData(), { once: true });
                } else {
                    this.setItemCartData();
                }
            },

            onGetCartData: function () {
                this.setItemCartData();
            },

            /**
             * Defines current item data based on global `window.extendCartData` object
             */
            setItemCartData: function () {
                const itemId = this.element.parentNode.dataset.item;
                if (window.extendCartData) {
                    this.itemCartData = (window.extendCartData.items || []).find((item) => {
                        return item.item_id == itemId;
                    });
                } else {
                    this.itemCartData = null;
                }

                if (this.itemCartData) {
                    if (this.itemCartData.product_type == '<?= $escaper->escapeJs(\Extend\Warranty\Model\Product\Type::TYPE_CODE) ?>') {
                        this.adjustWarrantyCartElement();
                    } else {
                        this.renderSimpleButton();
                    }
                }
            },

            /**
             * Makes changes to the Warranty cart item view
             */
            adjustWarrantyCartElement: function () {
                const skuElem = this.options.isInCartPage ?
                    this.itemElem.querySelector('div.item-options') :
                    this.itemElem.querySelector('p.text-xl + p.text-sm');
                const editBtns = this.options.isInCartPage ?
                    this.itemElem.querySelectorAll('div.cart-warranty-offers ~ p > a.text-primary-dark') :
                    this.itemElem.querySelectorAll('div.cart-warranty-offers ~ a.btn-primary');

                if (skuElem) {
                    skuElem.style.display = 'none';
                }
                if (editBtns) {
                    Array.from(editBtns, (editBtn) => {
                        editBtn.classList.add('hidden');
                    });
                }
            },

            /**
             * Renders Extend simple offer button
             */
            renderSimpleButton: function () {
                if (!this.options.buttonEnabled)
                    return;

                const button = Extend.buttons.instance(this.element);
                const referenceId = this.itemCartData && this.itemCartData.product_can_add_warranty ?
                    this.itemCartData.product_sku :
                    null;

                if (button) {
                    const product = button.getActiveProduct() || { id: null };
                    if (product.id !== referenceId) {
                        button.setActiveProduct(referenceId);
                    }
                } else if (referenceId) {
                    Extend.buttons.renderSimpleOffer(this.element, {
                        referenceId: referenceId,
                        onAddToCart: (data) => {
                            let warranty = data.plan;
                            if (warranty && data.product) {
                                warranty.product = data.product.id;
                            }

                            this._addToCart(warranty);
                        }
                    });
                }
            },

            /**
             * Warranty "Add To Cart" handler
             * @protected
             * @param {Object|null} warranty - warranty plan data
             */
            _addToCart: function (warranty) {
                if (!warranty || !window.extendCartData)
                    return;

                const addWarrantyQuery = `<?= /** @noEscape */ $viewModelGraphQl->query(
                    'add_warranty_to_cart_mutation',
                    'mutation addWarrantyToCart($cartId: String!, $warranty: WarrantyPlanCartItem!, $qty: Int, $option:String) {
                        addWarrantyToCart(
                            input: {
                                cart_id: $cartId
                                warranty: $warranty,
                                qty: $qty,
                                option: $option
                            }
                        ) {
                            cart {
                                id
                                items {
                                    id
                                    product {
                                        id
                                        name
                                    }
                                    quantity
                                }
                            }
                        }
                    }'
                ) ?>`;

                const variables = {
                    cartId: window.extendCartData.cartId,
                    warranty: warranty,
                    qty: this.itemCartData.qty
                };
                const cssClass = 'opacity-50';
                this.itemElem.classList.add(cssClass);

                fetch('<?= $escaper->escapeUrl($block->getBaseUrl()) ?>graphql', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json;charset=utf-8',
                        'Store': '<?= /* @noEscape */ $viewModelStore->getStoreCode() ?>'
                    },
                    body: JSON.stringify({query: addWarrantyQuery, variables: variables})
                })
                .then((response) => {
                    return response.json()
                })
                .then((data) => {
                    window.dispatchEvent(new CustomEvent('clear-messages'));

                    if (data.errors) {
                        const errors = data.errors.map((err) => { return err.message; });
                        this._onAddToCartError(errors.join('<br />'));
                    } else {
                        this._onAddToCartSuccess(data && data.data ? data.data.addWarrantyToCart : null);
                    }
                })
                .catch((error) => {
                    console.error(error);
                    this._onAddToCartError("<?= $escaper->escapeJs(__("Sorry, there has been an error processing your request. Please try again or contact our support.")) ?>");
                })
                .finally(() => {
                    this.itemElem.classList.remove(cssClass);
                });
            },

            /**
             * Warranty "Add To Cart" succeed
             * @protected
             * @param {Object} response - json-response data
             */
            _onAddToCartSuccess: function (response) {
                // Hide button
                const button = Extend.buttons.instance(this.element);
                if (button) {
                    button.setActiveProduct(null);
                }

                // trigger warranty 'Add To Cart' event
                if (this.options.addToCartEvent && response.cart) {
                    const addToCartEvent = new CustomEvent('ajax:' + this.options.addToCartEvent, {
                        detail: response.cart
                    });
                    window.dispatchEvent(addToCartEvent);
                }

                // reload cart items
                this._reloadCustomerData();
            },

            /**
             * Warranty "Add To Cart" failed
             * @protected
             */
            _onAddToCartError: function (errorMessage) {
                const messages = [{ type: 'error', text: errorMessage }];
                typeof window.dispatchMessages !== "undefined" && window.dispatchMessages(messages, 10000);
            },

            /**
             * Cart items refresh by reloading customer data
             * @protected
             */
            _reloadCustomerData() {
                const reloadCustomerDataEvent = new CustomEvent("reload-customer-section-data");
                window.dispatchEvent(reloadCustomerDataEvent);
            }
        };
    }
</script>

<div x-data="initCartWarrantyDetails()"
     @private-content-loaded.window="getExtendCartData(event.detail.data)">
</div>

<style>
    .minicart-warranty-offers iframe {
        min-height: 38px;
    }
</style>
