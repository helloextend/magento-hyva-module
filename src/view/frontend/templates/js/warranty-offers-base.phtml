<?php
/**
 * Hyva Extend Warranty - base warranty offers js-object
 *
 * @author      Extend Magento Team <magento@guidance.com>
 * @category    Extend
 * @package     Hyva_ExtendWarranty
 * @copyright   Copyright (c) 2022 Extend Inc. (https://www.extend.com/)
 */

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @var Escaper $escaper */
/** @var Template $block */
?>
<script>
    function initWarrantyOffers(element, config) {
        const defaults = {
            productSku: null,
            buttonEnabled: true,
            modalEnabled: false,
            formInputName: 'warranty'
        };

        const warrantyOffers = {
            element: null,
            options: {},

            init() {
                this.element = element;
                this.options = Object.assign(defaults, {
                    productSku: config.productSku,
                    buttonEnabled: config.buttonEnabled,
                    modalEnabled: config.modalEnabled,
                    formInputName: config.formInputName
                });

                return this;
            },

            /**
             * Renders warranty offers block
             */
            renderOffersButton: function () {
                if (!this.options.buttonEnabled)
                    return;

                Extend.buttons.render(this.element, {
                    referenceId: this.options.productSku
                });
            },

            /**
             * Renders warranty simple offer button
             *
             * @param {Function|null} addToCartCallback
             */
            renderSimpleButton: function (addToCartCallback) {
                if (!this.options.buttonEnabled)
                    return;

                Extend.buttons.renderSimpleOffer(this.element, {
                    referenceId: this.options.productSku,
                    onAddToCart: function (data) {
                        let warranty = data.plan;
                        if (warranty && data.product) {
                            warranty.product = data.product.id;
                        }

                        if (typeof (addToCartCallback) === 'function') {
                            addToCartCallback(warranty);
                        }
                    }
                });
            },

            /**
             * Returns current warranty offers block instance
             *
             * @return {Object|null}
             */
            getButtonInstance: function () {
                return Extend.buttons.instance(this.element);
            },

            /**
             * Updates warranty offers product
             *
             * @param {String} productSku - new product SKU
             */
            updateActiveProduct: function (productSku) {
                const component = this.getButtonInstance();
                if (!component)
                    return;

                const product = component.getActiveProduct() || { id: '' };
                if (product.id !== productSku) {
                    component.setActiveProduct(productSku);
                }
            },

            /**
             * Opens warranty offers modal
             *
             * @param {String} productSku - product SKU
             * @param {Function} closeCallback - function to be invoked after the modal is closed
             */
            openOffersModal: function (productSku, closeCallback) {
                if (!this.options.modalEnabled) {
                    closeCallback(null);
                    return;
                }

                Extend.modal.open({
                    referenceId: productSku,
                    onClose: closeCallback.bind(this)
                });
            },

            /**
             * Get warranty inputs for the "Add To Cart" form
             * @protected
             * @param {String} productSku - currently selected product SKU
             * @param {Object} plan - selected warranty offer plan
             * @param {String} componentName - component name for tracking (`button` or `modal`)
             */
            getWarrantyFormInputs: function (productSku, plan, componentName) {
                let inputs = [];
                const data = Object.assign({
                    product: productSku,
                    component: componentName
                }, plan);

                for (let attribute in data) {
                    const value = data[attribute];
                    const newInput = document.createElement('input');
                    newInput.setAttribute('type', 'hidden');
                    newInput.name = this.options.formInputName + '[' + attribute + ']';
                    newInput.value = value;

                    inputs.push(newInput);
                }

                return inputs;
            }
        };

        return warrantyOffers.init(element, config);
    }
</script>
